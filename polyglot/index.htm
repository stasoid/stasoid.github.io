<!doctype html>
<meta charset="utf-8">

<link rel="stylesheet" href="styles.css">

<script src="tio.js"></script>
<script src="languages.js"></script>
<script src="util.js"></script>

<script>

var code;
var n_langs = langs.length-1; // total number of langs
var passed=0, failed=[], skipped=[];
var finished=0; // number of langs that finished testing, passed + failed + skipped

function run_lang(lang, onfinish)
{
	// indicates that this lang is either finished or being worked on, no need to run it again
	// (checked in run_next when finding next lang to test)
	lang.processed = true;

	var arg = lang.arg ? readurl(lang.arg) : "";

	if(lang.type == "tio")
	{
		let t = lang.timeout || 5;
		let cmd = "cat>f\n" + "cat<<'.'>s\n" + lang.cmd + "\n.\n" + "timeout -k1 " + t + ' bash s "$1"';
		tio_run(lang.n, cmd, code, arg, onfinish);
	}
	else // skip
	{
		skipped.push(lang.n);
		finished++;
		update_status();
		run_next(lang.n);
	}
}

function trim_newlines(str)
{
	while(str.slice(-1) == '\n')
	{
		str = str.slice(0,-1);
		if(str.slice(-1) == '\r')
			str = str.slice(0,-1);
	}
	return str;
}

function onfinish(n, stdout, stderr, warnings)
{
	langs[n].result = {stdout, stderr, warnings};

	var result = trim_newlines(stdout);
	var expected_result = langs[n].stdout || n+"";

	if(result == expected_result)
		passed++;
	else
		failed.push(n);
	finished++;
	update_status();

	run_next(n);
}

// find and run next untested lang
function run_next(n)
{
	if(finished == n_langs) // all langs are finished, nothing to do
		return;

	var next = n+1;
	while(next != n_langs+1 && langs[next].processed)
		next++;
	if(next != n_langs+1)
		run_lang(langs[next], onfinish);
}

function run()
{
	code = editor.value.replace(/\7/g, '\r'); // BEL -> CR

	abort_all_requests();
	langs.forEach(lang => lang.processed = false);
	passed = finished = 0;
	skipped = [];
	failed = [];
	update_status();

	run_lang(langs[1], onfinish);
	run_lang(langs[2], onfinish);
	run_lang(langs[3], onfinish);
}

function get_debug_link(lang)
{
	let tooltip = 'stdout:\n' + lang.result.stdout + '\nstderr:\n' + lang.result.stderr;
	if(lang.result.warnings) tooltip += "\nwarnings:\n" + lang.result.warnings;
//	if(lang.type != "tio")
		return `<a title='${tooltip}'>${lang.name}</a>`; // still need <a> for proper styling

//	let debug_cmd = "cat>f\n" + (lang.debug_cmd || lang.cmd);
//	let tio_link = ...
//	return `<a href='${tio_link}'>${lang.name}</a>`;
}

function update_status()
{
	let skipped_langs = skipped.reduce( (result,n) => result += langs[n].name + ' ', '' );
	skipped_langs = `<span title='${skipped_langs}'>skipped:${skipped.length}</span>`;

	let failed_langs = failed.reduce( (result,n) => result += get_debug_link(langs[n]) + ' ', '' );
	failed_langs = 'failed:'+failed.length+' '+failed_langs;

	$('#status').innerHTML = finished+'/'+n_langs + ' passed:'+passed + ' '+skipped_langs + ' '+failed_langs;
}

onload = function()
{
	// make buttons unfocusable, so they don't steal focus from the editor
	$$('button').forEach(btn=>btn.addEventListener("mousedown", evt=>evt.preventDefault()));
	editor.value = readurl("346.txt");
	editor.setSelectionRange(0,0);
	update_status();
}

</script>


<body>
  <textarea id=editor rows=28 cols=130 wrap=off spellcheck=false autofocus style="font:16pt Consolas">print(1)#i2</textarea> <br>
  <button onclick="run()" style="font:16pt Arial">run</button>&nbsp;&nbsp;&nbsp;
  <span id=status style="font:16pt Arial"></span>
</body>
