<!doctype html>
<meta charset="utf-8">

<link rel="stylesheet" href="styles.css">

<script src="languages.js"></script>
<script src="util.js"></script>
<script src="tio.js"></script>
<script src="ato.js"></script>
<script src="v86/v86.js"></script>

<script>

var code;
var passed=0, failed=[], skipped=[];
var queue, v86_queue; // queues of langs to test
var internal_error = false;

function run_lang(lang, onfinish)
{
	let timeout = lang.timeout || 5;

	if(lang.type == "tio")
	{
		// without timeout it would be just "cat>f;"+lang.cmd
		let cmd = `cat>f;cat<<'end'>s\n${lang.cmd}\nend\ntimeout -k1 ${timeout} bash s "$1"`;
		let arg = lang.arg ? readfile(lang.arg) : "";
		tio_run(lang.n, cmd, code, arg, onfinish);
	}
	else if(lang.type == "ato")
	{
		ato_run(lang.n, code, lang.id, lang.opt, timeout, onfinish);
	}
	else // skip
	{
		skipped.push(lang.n);
		update_status();
		run_next();
	}
}

function onfinish(n, stdout, stderr, warnings, fn_next)
{
	langs[n].result = {stdout, stderr, warnings};

	var result = stdout.rtrim("\r\n");
	var expected_result = langs[n].stdout || n+"";

	if(result == expected_result)
		passed++;
	else
		failed.push(n);
	update_status();

	(fn_next || run_next)();
}

// run next untested lang
function run_next()
{
	let n = queue.shift();
	if(n) run_lang(langs[n], onfinish);
}

function run()
{
	code = editor.value.replace(/\7/g, '\r'); // BEL -> CR

	abort_all_requests();
	let all = langs.slice(1).map(l=>l.n); // [1,2,..,N]
	// all = only || first + all;
	// all = all.uniq();
	queue = []; //all.filter(l=>l.type!="v86");
	v86_queue = [45]; //all.filter(l=>l.type=="v86");
	passed = 0;
	skipped = [];
	failed = [];
	internal_error = false;
	update_status();

	run_next();
	run_next();
	run_next();
	// v86 langs must be executed sequentially, so they are run in a separate "thread"
	// this is also good for performance - we start executing them right away
	v86_run_all(code);
}

function get_debug_link(lang)
{
	let tooltip = 'stdout:\n' + lang.result.stdout + '\nstderr:\n' + lang.result.stderr;
	if(lang.result.warnings) tooltip += "\nwarnings:\n" + lang.result.warnings;
//	if(lang.type != "tio")
		return `<a title='${tooltip}'>${lang.name}</a>`; // still need <a> for proper styling

//	let debug_cmd = "cat>f\n" + (lang.debug_cmd || lang.cmd);
//	let tio_link = ...
//	return `<a href='${tio_link}'>${lang.name}</a>`;
}

function update_status()
{
	let total = langs.length-1; // total number of langs
	let finished = passed + failed.length + skipped.length; // number of langs that finished testing, passed + failed + skipped

	let skipped_langs = skipped.reduce( (result,n) => result += langs[n].name + ' ', '' );
	skipped_langs = `<span title='${skipped_langs}'>skipped:${skipped.length}</span>`;

	let failed_langs = failed.reduce( (result,n) => result += get_debug_link(langs[n]) + ' ', '' );
	failed_langs = 'failed:'+failed.length+' '+failed_langs;

	let error = internal_error ? "<br><span style=color:red>Internal error occurred. See JS Console.</span>" : "";

	$('#status').innerHTML = finished+'/'+total + ' passed:'+passed + ' '+skipped_langs + ' '+failed_langs + error;
}

onload = function()
{
	v86_create();
	// make buttons unfocusable, so they don't steal focus from the editor
	$$('button').forEach(btn => btn.addEventListener("mousedown", evt=>evt.preventDefault()));
	editor.value = readfile("346.txt");
	editor.setSelectionRange(0,0);
	update_status();
}

</script>


<body>
  <textarea id=editor rows=28 cols=130 wrap=off spellcheck=false autofocus style="font:16pt Consolas">print(1)#i2</textarea> <br>
  <button onclick="run()" style="font:16pt Arial">run</button>&nbsp;&nbsp;&nbsp;
  <span id=status style="font:16pt Arial"></span>
</body>
